import heapq
goal_state = [[1,2,3],[4,5,6],[7,8,0]]
def manhattan(state):
    dist = 0
    for i in range(3):
        for j in range(3):
            val = state[i][j]
            if val != 0:
                x, y = divmod(val-1, 3)
                dist += abs(x-i) + abs(y-j)
    return dist
def state_to_tuple(state):
    return tuple(sum(state, []))
def find_blank(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j
def get_neighbors(state):
    i, j = find_blank(state)
    moves = [(1,0),(-1,0),(0,1),(0,-1)]
    neighbors = []
    for di, dj in moves:
        ni, nj = i+di, j+dj
        if 0 <= ni < 3 and 0 <= nj < 3:
            new_state = [row[:] for row in state]
            new_state[i][j], new_state[ni][nj] = new_state[ni][nj], new_state[i][j]
            neighbors.append(new_state)
    return neighbors
def solve_puzzle(start):
    pq = [(manhattan(start), 0, start, [])]
    visited = set()
    while pq:
        f, g, state, path = heapq.heappop(pq)
        if state == goal_state:
            return path + [state]
        if state_to_tuple(state) in visited:
            continue
        visited.add(state_to_tuple(state))
        for neighbor in get_neighbors(state):
            heapq.heappush(pq, (g+1+manhattan(neighbor), g+1, neighbor, path+[state]))
    return None
start_state = [[1,2,3],[5,0,6],[4,7,8]]
solution = solve_puzzle(start_state)
print("Steps to solve:")
for step in solution:
    for row in step:
        print(row)
    print()
